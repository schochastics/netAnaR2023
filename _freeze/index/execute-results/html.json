{
  "hash": "b2076c06ad3dfef1f5ba1ad5c1389ec3",
  "result": {
    "markdown": "::: {.cell hash='index_cache/revealjs/setup_a0ec517c633e33453f1dc584d508cd75'}\n\n:::\n\n\n:::{.center-x}\n![](img/qr-code.png){width=\"400\"}  \n<https://schochastics.github.io/netAnaR2023>\n:::\n\n## My R universe\n\n<img src=\"img/hex_bg.png\" width=\"400\">\n\n## My R universe\n\n<img src=\"img/hex_net_bg.png\" width=\"605\">\n\n# A Short Introduction to Network Analysis\n\n\n## Why study networks?\nconventional research methods are often individual based\nand our models tend to model relations between variables\n\n:::{.fragment}\n**but nature and culture is structured as networks**\n:::\n\n:::{.fragment}\n- **society**\n- brain (neural networks)\n- organizations (who reports to whom)\n- economies (who sells to whom)\n- ecologies (who eats whom)\n:::\n\n:::{.fragment}\n**Position within a network is important for predicting outcomes**\n:::\n\n## From \"ordinary\" to network data\n\n<br>\n\n:::{.fragment}\n**atomic data**  \nindividuals or entities\n:::\n\n:::{.fragment}\n**dyadic data**  \ndependent pairs of individuals (e.g. couples)  \nbut treated as independent entities\n:::\n\n:::{.fragment}\n**networks**  \ninterdependent and overlapping dyads    \nusual (statistical) independence assumptions do not hold\n:::\n\n## 4 pillars of network analysis \n\n:::{.text15}\n\n 1. Social network analysis is motivated by a structural intuition based on ties linking social actors\n \n 2. It is grounded in systematic empirical data\n \n 3. It draws heavily on graphic imagery\n \n 4. It relies on the use of mathematical and/or computational models\n\n:::\n\n\n## Levels of Analysis\n\n<br>\n\n:::{.fragment}\n**dyad level**  \nFundamental unit of network data collection  \n(\"Does sharing offices lead to friendship?\") \n:::\n\n:::{.fragment}\n**node level**  \nAggregation of dyad level measurement  \n(\"Do actors with more friends have a stronger immune system?\")\n:::\n\n:::{.fragment}\n**network level**  \nAssessing overal structure of a network  \n(\"Do well connected networks diffuse ideas faster?\")\n:::\n\n:::{.fragment .text08}\nmore levels are possible (triads, groups, ...)\n:::\n\n## Types of relations I\n\n<br>\n\n:::{.fragment}\n**Relational states**  \n\n- Similarities: location, participation, attribute  \n- Relational roles: kinship, other roles  \n- Relational cognition: affective, perceptual\n:::\n\n:::{.fragment}\n**Relational events**  \n\n- Interactions: sold to, talked to, helped, ...\n- Flows: information, belief, money\n:::\n\n## Types of relations II\n\n<br>\n\n:::{.fragment}\n**undirected**  \nsymmetric relation\n:::\n\n:::{.fragment}\n**directed**  \nasymmetric relation, but can be bi-directional\n:::\n\n:::{.fragment}\n**valued**  \nstrength of relation, frequency of contact, etc.\n:::\n\n:::{.fragment}\n**signed**  \npositive and negative relations\n:::\n\n:::{.fragment}\n**or a mixture thereof**\n:::\n\n## Goals of analysis\n\n:::{.fragment}\n**Network variables as independent/explanatory**  \n\n> *Using network theory to explain the consequences of network properties*\n\nsocial capital, brokerage, adoption of innovation\n:::\n\n:::{.fragment}\n**Network variables as dependent/outcomes**  \n\n> *Using ______ theory to explain the antecendents of a network*\n\nhomophily, balance theory\n:::\n\n\n## A tiny bit of math\n\nnetwork data are represented as **graphs**  \n\"graph\" and \"network\" are technically different\n\n:::{.frame-box}\nA graph $G$ consists of a tuple $(V,E)$ where  \n$V=\\{1,2,\\ldots,n\\}$ are the nodes (or vertices)  \n$E\\subseteq \\{(i,j): i,j \\in V\\}$ are the edges (or ties)\n:::\n\n**Most methods rely on concepts from graph theory**\n\n# R Ecosystem for Networks\n\n##\n\n:::{.center-x}\n![](img/tidyverse-meme.jpg)\n:::\n\n\n## What is \"base R\" for networks?\n\n\n::: {.cell hash='index_cache/revealjs/cranet_542aed4aa208c61d3b79caf0565f84dc'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/cranet-1.png){width=960}\n:::\n:::\n\n\n\n## Which package to choose?\n\n<br>\n\nuse `igraph` if\n\n- you need speed (large networks)\n- you need to use other SNA packages\n\n:::{.fragment}\nuse `network`/`sna` if\n\n- you need to do modeling (e.g. ERGMs and RSIENA)\n:::\n\n:::{.fragment}\n**does not make a difference in most cases, never load them both!**\n:::\n\n## Creating simple networks\n\n\n::: {.cell hash='index_cache/revealjs/make_graph_b4690d511c9d16027ef538c648a260be'}\n\n```{.r .cell-code}\ng1 <- make_graph(c(1,2, 1,3, 2,3, 2,4, 3,5, 4,5), n = 5, dir = FALSE)\ng2 <- graph_from_literal(Joey-Chandler:Monica-Ross, Joey-Ross-Rachel)\n```\n:::\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell hash='index_cache/revealjs/make_graph_lot_a7099c2ad2257368af94f3727c731cd0'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/make_graph_lot-1.png){width=384}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell hash='index_cache/revealjs/make_literal_lot_55630dc6f199bb9f7baef760dd9d2872'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/make_literal_lot-1.png){width=384}\n:::\n:::\n\n\n:::\n\n::::\n\n## Special graphs\n\n\n::: {.cell hash='index_cache/revealjs/make_examples_1e0ecaa6bf78d0fea5106d813328d257'}\n\n```{.r .cell-code}\ng3 <- make_full_graph(n = 10)\ng4 <- make_ring(n = 10)\ng5 <- make_empty_graph(n = 10)\n```\n:::\n\n\n:::: {.columns}\n::: {.column width=\"33%\"}\n\n::: {.cell hash='index_cache/revealjs/full_graph_plot_06c9a2d454de8fbcf802ce0b38a0a255'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/full_graph_plot-1.png){width=288}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"33%\"}\n\n\n::: {.cell hash='index_cache/revealjs/ring_plot_d6c91012d134802bde2ed02bda827298'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/ring_plot-1.png){width=288}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"33%\"}\n\n\n::: {.cell hash='index_cache/revealjs/empty_plot_1cfc96fcd1b9726aa083912ce9836c1a'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/empty_plot-1.png){width=288}\n:::\n:::\n\n\n:::\n\n\n::::\n\n\n::: {.cell hash='index_cache/revealjs/igraph_make_e09e4d34cf56710059e0fef66a812a83'}\n\n```{.r .cell-code}\nls(\"package:igraph\",pattern = \"make_*\")\n```\n:::\n\n\n## Random graphs\n\n\n::: {.cell hash='index_cache/revealjs/make_randoms_63993b0f652b44c4e99a3c31bca0df2e'}\n\n```{.r .cell-code}\ng6 <- sample_gnp(n = 100,p = 0.1)\ng7 <- sample_pa(n = 100, power = 1.5, m = 1, directed = FALSE)\n```\n:::\n\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell hash='index_cache/revealjs/er_plot_ccfb1bc317e887f19884acfd6a9909ac'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/er_plot-1.png){width=384}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell hash='index_cache/revealjs/pa_plot_f40f593c411fe769304da4ee91ba9a7c'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/pa_plot-1.png){width=384}\n:::\n:::\n\n\n:::\n::::\n\n\n::: {.cell hash='index_cache/revealjs/igraph_sample_434b4d76929e1684bfdb19e47b1851a0'}\n\n```{.r .cell-code}\nls(\"package:igraph\",pattern = \"sample_*\")\n```\n:::\n\n\n## igraph objects \n\n\n\n::: {.cell hash='index_cache/revealjs/igraph_obj_03e5becdcc366c454c3ccd61c2e75fb0'}\n\n```{.r .cell-code}\ng2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 4ff3396 UN-- 5 6 -- \n+ attr: name (v/c)\n+ edges from 4ff3396 (vertex names):\n[1] Joey    --Chandler Joey    --Monica   Joey    --Ross     Chandler--Ross    \n[5] Monica  --Ross     Ross    --Rachel  \n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/str_igraph_1f67a255b623823164f749d95ac9107f'}\n\n```{.r .cell-code}\nlibrary(netUtils)\nstr(g2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-----------------------------------------------------------\nUNNAMED NETWORK (undirected, unweighted, one-mode network)\n-----------------------------------------------------------\nNodes: 5, Edges: 6, Density: 0.6, Components: 1, Isolates: 0\n-Vertex Attributes:\n name(c): Joey, Chandler, Monica, Ross, Rachel ...\n---\n-Edges: \n Joey--Chandler Joey--Monica Joey--Ross Chandler--Ross Monica--Ross\nRoss--Rachel\n```\n:::\n:::\n\n\n## Attributes\n\n:::{.fragment}\n**node attributes**\n\n::: {.cell hash='index_cache/revealjs/vadd_attr_b50eddd28ae36020d18b3902a5e691f3'}\n\n```{.r .cell-code}\nV(g2)$name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Joey\"     \"Chandler\" \"Monica\"   \"Ross\"     \"Rachel\"  \n```\n:::\n\n```{.r .cell-code}\nV(g2)$gender <- c(\"M\",\"M\",\"F\",\"M\",\"F\") \n# g2 <- set_vertex_attr(\"gender\", c(\"M\",\"M\",\"F\",\"M\",\"F\"))\n```\n:::\n\n:::\n\n:::{.fragment}\n**edge attributes**\n\n\n::: {.cell hash='index_cache/revealjs/eadd_attr_675a13e573c5217b6ad51225080abeb5'}\n\n```{.r .cell-code}\nE(g2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+ 6/6 edges from 4ff3396 (vertex names):\n[1] Joey    --Chandler Joey    --Monica   Joey    --Ross     Chandler--Ross    \n[5] Monica  --Ross     Ross    --Rachel  \n```\n:::\n\n```{.r .cell-code}\nE(g2)$weight <- sample(1:5,size = 6, replace = TRUE)\n# g2 <- set_edge_attr(\"weight\", sample(1:5,size = 6, replace = TRUE))\n```\n:::\n\n:::\n\n## Attributes\n\n\n::: {.cell hash='index_cache/revealjs/igraph_obj1_dc36023a86ae1913af3f66672ff400ce'}\n\n```{.r .cell-code}\ng2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH 4ff3396 UNW- 5 6 -- \n+ attr: name (v/c), gender (v/c), weight (e/n)\n+ edges from 4ff3396 (vertex names):\n[1] Joey    --Chandler Joey    --Monica   Joey    --Ross     Chandler--Ross    \n[5] Monica  --Ross     Ross    --Rachel  \n```\n:::\n:::\n\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/str_igraph1_fda9086db5d415bc1f20156e896c37c3'}\n\n```{.r .cell-code}\nstr(g2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n---------------------------------------------------------\nUNNAMED NETWORK (undirected, weighted, one-mode network)\n---------------------------------------------------------\nNodes: 5, Edges: 6, Density: 0.6, Components: 1, Isolates: 0\n-Vertex Attributes:\n name(c): Joey, Chandler, Monica, Ross, Rachel ...\n gender(c): M, M, F, M, F ...\n---\n-Edge Attributes:\n weight(n): 4, 2, 4, 4, 1, 3 ...\n---\n-Edges: \n Joey--Chandler Joey--Monica Joey--Ross Chandler--Ross Monica--Ross\nRoss--Rachel\n```\n:::\n:::\n\n\n## Network representations: adjacency matrix\n\n\n::: {.cell hash='index_cache/revealjs/adj_mat_6adc2655fe61871d154ca659a9496426'}\n\n```{.r .cell-code}\nA <- matrix(\n  c(0, 1, 1,\n    1, 0, 1,\n    1, 1, 0),\n  nrow = 3, ncol = 3, byrow = TRUE)\nrownames(A) <- c(\"Bob\",\"Ann\",\"Steve\")\ncolnames(A) <- c(\"Bob\",\"Ann\",\"Steve\")\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Bob Ann Steve\nBob     0   1     1\nAnn     1   0     1\nSteve   1   1     0\n```\n:::\n:::\n\n\n- $A_{ij}=1$ if there is an edge between $i$ and $j$\n- $A$ is symmetric for undirected networks \n- If $A_{ij}>1$ then the values are interpreted as weights \n\n## Network representation: edgelist\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/edge_lst_1131014f9143fd31cabb83c4b073de42'}\n\n```{.r .cell-code}\nel <- matrix(\n  c(\"Bob\",\"Ann\",\n    \"Bob\",\"Steve\",\n    \"Ann\",\"Steve\"),\n  nrow = 3,ncol = 2, byrow = TRUE)\nel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]  [,2]   \n[1,] \"Bob\" \"Ann\"  \n[2,] \"Bob\" \"Steve\"\n[3,] \"Ann\" \"Steve\"\n```\n:::\n:::\n\n\nmore efficient for sparse data (null edges aren't stored)\n\n## Networks from matrices and lists\n\n**adjacency matrix**\n\n::: {.cell hash='index_cache/revealjs/from_adj_1064f095417998454c20e9fd8da24f88'}\n\n```{.r .cell-code}\ngraph_from_adjacency_matrix(\n  A,\n  mode = \"undirected\",\n  weighted = NULL,\n  diag = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH e930fc9 UN-- 3 3 -- \n+ attr: name (v/c)\n+ edges from e930fc9 (vertex names):\n[1] Bob--Ann   Bob--Steve Ann--Steve\n```\n:::\n:::\n\n\n**edgelist**\n\n::: {.cell hash='index_cache/revealjs/from_edgelist_206f3fa39884d8f27dc92ec578711a92'}\n\n```{.r .cell-code}\ngraph_from_edgelist(el, directed = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIGRAPH adabc74 UN-- 3 3 -- \n+ attr: name (v/c)\n+ edges from adabc74 (vertex names):\n[1] Bob--Ann   Bob--Steve Ann--Steve\n```\n:::\n:::\n\n::: {.cell hash='index_cache/revealjs/graph_from_5140566f5cf0af9719e5477d180d7cd0'}\n\n```{.r .cell-code}\nls(\"package:igraph\",pattern = \"graph_from_*\")\n```\n:::\n\n\n## Reading network data\n\n<br>\n\n:::{.fragment}\n**Data is already in R (e.g. `networkdata`)**  \nNo extra work\n:::\n\n:::{.fragment}\n**Data was processed in another SNA tool**  \n\n::: {.cell hash='index_cache/revealjs/read_graph_d5f58b9b976f54ffae7a4995bda24b72'}\n\n```{.r .cell-code}\nread_graph(file, format = c(\"edgelist\", \"pajek\", \"ncol\", \"lgl\",\n  \"graphml\", \"dimacs\", \"graphdb\", \"gml\", \"dl\"), ...)\n```\n:::\n\nSome extra work (with some issues) \n:::\n\n:::{.fragment}\n**Data is in a csv/spreadsheet/..**  \n`read.table()`, `read.csv()`, {{< CRAN readxl >}}, {{< CRAN readr >}},...\n:::\n\n## Preparing network data with attributes {.smaller}\n\n**Organize network data in two separate files**\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n::: {.cell hash='index_cache/revealjs/el_df_f8a367251e38692dd381b4f6a8f530b3'}\n::: {.cell-output-display}\n|from            |to             |\n|:---------------|:--------------|\n|Arizona Robbins |Leah Murphy    |\n|Alex Karev      |Leah Murphy    |\n|Arizona Robbins |Lauren Boswell |\n|Arizona Robbins |Callie Torres  |\n|Erica Hahn      |Callie Torres  |\n|Alex Karev      |Callie Torres  |\n:::\n:::\n\n:::\n:::{.column width=\"50%\"}\n\n::: {.cell hash='index_cache/revealjs/node_df_8d6ada18a728b4c80fed52117c19a668'}\n::: {.cell-output-display}\n|name               |sex | birthyear|\n|:------------------|:---|---------:|\n|Addison Montgomery |F   |      1967|\n|Adele Webber       |F   |      1949|\n|Teddy Altman       |F   |      1969|\n|Amelia Shepherd    |F   |      1981|\n|Arizona Robbins    |F   |      1976|\n|Rebecca Pope       |F   |      1975|\n:::\n:::\n\n:::\n:::\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/df1_887e1385f6e0e75bbbc9c53dabe4fd33'}\n\n```{.r .cell-code}\ngraph_from_data_frame(el, directed = c(TRUE, FALSE), vertices)\n```\n:::\n\n\n# Descriptive Statistics and some graph theory\n\n## Toy example\n\n::: {.cell hash='index_cache/revealjs/load_greys_6dfc456efc9e43ff503f51d06fdf315d'}\n\n```{.r .cell-code}\ndata(\"greys\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/plot_greys_ba4957358ce59c16eb61cb3d6a58ab14'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/plot_greys-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\n## Density\n\n<br>\n\nThe **density** of a network is defined as the fraction of the potential edges in a network that are actually present.\n\n::: {.cell hash='index_cache/revealjs/density_e24ec8ceb9aee7b6d9630de59d9ae762'}\n\n```{.r .cell-code}\nc(graph.density(make_empty_graph(10)), \n  graph.density(greys), \n  graph.density(make_full_graph(10)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0000000 0.0398323 1.0000000\n```\n:::\n:::\n\n\n## Shortest Paths\n\nA **shortest path** is a path that connects two nodes in a network with a minimal number of edges. The length of a shortest path is called the distance between two nodes.\n\n\n::: {.cell hash='index_cache/revealjs/shortest_path_eaaa0d7509bae53536d71eeed65bd738'}\n\n```{.r .cell-code}\nshortest_paths(greys,from = \"Alex Karev\",to = \"Owen Hunt\",output = \"vpath\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$vpath\n$vpath[[1]]\n+ 5/54 vertices, named, from f7716f1:\n[1] Alex Karev         Addison Montgomery Mark Sloan         Teddy Altman      \n[5] Owen Hunt         \n\n\n$epath\nNULL\n\n$predecessors\nNULL\n\n$inbound_edges\nNULL\n```\n:::\n:::\n\n\n## Shortest Paths\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/greys_shortest_path_af60c44c74b8f327ec60ca8e2d403cd6'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/greys_shortest_path-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\n## Distances\n\n\n::: {.cell hash='index_cache/revealjs/distances_85f665ef8a6842da317077836da3870e'}\n\n```{.r .cell-code}\ndistances(greys)[1:5,1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Addison Montgomery Adele Webber Teddy Altman Amelia Shepherd\nAddison Montgomery                  0          Inf            2               2\nAdele Webber                      Inf            0          Inf             Inf\nTeddy Altman                        2          Inf            0               2\nAmelia Shepherd                     2          Inf            2               0\nArizona Robbins                     3          Inf            3               3\n                   Arizona Robbins\nAddison Montgomery               3\nAdele Webber                   Inf\nTeddy Altman                     3\nAmelia Shepherd                  3\nArizona Robbins                  0\n```\n:::\n:::\n\n\nThe Grey's Anatomy network is **disconnected** ($4$ **connected components**)\n\n## Diameter\n\nThe length of the longest shortest path is called the **diameter** of the network.\n\n\n::: {.cell hash='index_cache/revealjs/diameter_a53c94d96f05d8355528b52350ccfa54'}\n\n```{.r .cell-code}\ndiameter(greys)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/greys_diameter_7dab81e51d0c8c8493057e293b0372ec'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/greys_diameter-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\n## Transitivity\n\n**Transitivity** is a measure of the degree to which nodes in a graph tend to cluster together. This is also called the **clustering coefficient**. \n\n**local**  \ngives an indication of the embeddedness of single nodes\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/ccoef_example_074104a40356e5dc7763ab9a9c1a463c'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/ccoef_example-1.png){fig-align='center' width=1440}\n:::\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"65%\"}\n**global**  \nindication of the clustering in the network\n:::\n\n::: {.column width=\"35%\"}\n$$\n\\frac{3 \\times \\text{number of triangles} }{\\text{total number of triplets}}\n$$\n\n:::\n\n::::\n\n## Transitivity\n\n::: {.cell hash='index_cache/revealjs/transitivity_faf00730bdf15d07c78022185ff3ac14'}\n\n```{.r .cell-code}\ndata(\"coleman\")\ng <- as.undirected(coleman[[1]])\ntransitivity(g, type = \"global\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.440083\n```\n:::\n:::\n\n::: {.cell hash='index_cache/revealjs/transitivity2_5330b411000352edce7cd3765c7f19b4'}\n\n```{.r .cell-code}\ntransitivity(g, type = \"local\", isolates = \"zero\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.400000 1.000000 0.000000 0.500000 0.666667 1.000000 0.000000 0.000000\n [9] 0.533333 0.000000 0.400000 1.000000 0.333333 0.333333 0.000000 0.333333\n[17] 0.000000 0.400000 0.333333 0.428571 0.303030 0.377778 0.305556 0.000000\n[25] 0.000000 0.266667 0.333333 0.000000 0.000000 1.000000 0.166667 0.400000\n[33] 0.700000 1.000000 0.333333 0.700000 0.666667 0.285714 0.200000 0.200000\n[41] 0.466667 0.600000 0.266667 0.000000 0.700000 0.500000 0.600000 0.466667\n[49] 0.666667 0.571429 0.333333 0.571429 0.666667 0.266667 0.357143 0.666667\n[57] 0.600000 1.000000 0.500000 0.600000 0.666667 0.500000 0.800000 0.700000\n[65] 0.600000 0.714286 0.866667 0.244444 0.714286 0.377778 0.488889 0.000000\n[73] 0.000000\n```\n:::\n:::\n\n\nIn empirical networks, we often observe a tendency towards high transitivity (\"the friend of a friend is a friend\")  \n\nWhat do you think is the (local/global) transitivity of `greys`?\n\n## Transitivity\n<br>\n\nThe value itself is not always enough to judge the level of transitivity of a network. We should also check if it deviates significantly from what would be expected by randomness\n\n\n::: {.cell hash='index_cache/revealjs/transitivity3_087bb0a5df0d166ddba396b0da1d8d23'}\n\n```{.r .cell-code}\ndeg <- degree(g)\n# keep density fixed\nmean(replicate(500,transitivity(rewire(g,each_edge(1)),type = \"global\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0675402\n```\n:::\n\n```{.r .cell-code}\n# keep degree sequence fixed\nmean(replicate(500,transitivity(sample_degseq(deg),type = \"global\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.0742782\n```\n:::\n:::\n\n## Degree distribution\n\n<br>\n\nThe **degree** of a node in a network is the number of connections it has to other nodes.\n\nThe **degree distribution** is the probability distribution of the degrees over the whole network.\n\nEmpirical degree distributions are generally right skewed.  \n(Many nodes have a few conncetions and few have many)\n\"preferential attachment\", \"matthew effect\", \"the rich get richer\"  \n\n## Degree distribution\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/deg_dist_graphs_9d46709d58eb10492de72088fc54ad3a'}\n\n```{.r .cell-code}\ner <- sample_gnp(n = 5000, p = 0.01)\npa <- sample_pa(n = 5000, power = 1.5, m = 2, directed = FALSE)\n```\n:::\n\n\n<br>\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell hash='index_cache/revealjs/dd_er_ad91cb3140a563029a869e31b8198bc4'}\n\n```{.r .cell-code}\nplot(degree_distribution(er))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/dd_er-1.png){width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell hash='index_cache/revealjs/dd_pa_0e0eb859c3c5cf4c4aeb6eb3da1df6e3'}\n\n```{.r .cell-code}\nplot(degree_distribution(pa),log = \"xy\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/dd_pa-1.png){width=960}\n:::\n:::\n\n\n:::\n\n::::\n\n## Centrality\n\nA **measure of centrality** is an index that assigns a numeric values to\nthe nodes of the network. The higher the value, the more central the node. \n\n\"Being central\" is a very ambiguous term hence there exists a large variety of indices that assess centrality with very different structural properties.\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/star_net_444809096dcfddb1d4758e5b7f6565cb'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/star_net-1.png){fig-align='center' width=384}\n:::\n:::\n\n\n\n##\n\n\n::: {.cell hash='index_cache/revealjs/periodic_3d465e64c51494f13ef332faefc49bef'}\n::: {.cell-output-display}\n![](img/periodic_table.png){width=835}\n:::\n:::\n\n\n## Standard indices {.text09}\n\n**Degree**  \nNumber of direct neighbors (\"popularity\")  \n\n**Closeness**  \nReciprocal of the sum of the length of the shortest paths\n\n**Betweenness**  \nNumber of shortest paths that pass through a node (\"brokerage\")\n\n**Eigenvector**  \nBeing central means being connected to other central nodes\n\n**PageRank**  \nSimilar to eigenvector, just for directed networks \n\n## Toy example I\n\n\n::: {.cell hash='index_cache/revealjs/load_dbces_1bf60e99ba216a5c57adc4455974b630'}\n\n```{.r .cell-code}\ndata(\"dbces11\")\n```\n:::\n\n::: {.cell hash='index_cache/revealjs/dbces11_basic_plot_85b6e43c0267400a88c2ad9a7c9f0bf5'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/dbces11_basic_plot-1.png){width=960}\n:::\n:::\n\n\n## Toy example I\n\n\n::: {.cell hash='index_cache/revealjs/load_dbces1_b5e8c422e1f8279a052c9aadf552f3a7'}\n\n```{.r .cell-code}\ndata(\"dbces11\")\n```\n:::\n\n::: {.cell hash='index_cache/revealjs/dbces11_plot_54fec6ee956e209123125398de0d4ca3'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/dbces11_plot-1.png){width=960}\n:::\n:::\n\n\n\n## Implemented indices {.smaller}\n\n`igraph` contains the following 10 indices:\n\n- [degree (`degree()`)]{.highlight}\n- [weighted degree (`strength()`)]{.highlight}\n- [betweenness (`betweenness()`)]{.highlight}\n- [closeness (`closeness()`)]{.highlight}\n- [eigenvector (`eigen_centrality()`)]{.highlight}\n- alpha centrality (`alpha_centrality()`)\n- power centrality (`power_centrality()`)\n- [PageRank (`page_rank()`)]{.highlight}\n- eccentricity (`eccentricity()`)\n- hubs and authorities (`authority_score()` and `hub_score()`)\n- subgraph centrality (`subgraph_centrality()`)\n\n## Indices in the sna package\n\nThe `sna` package implements roughly the same indices as but adds:\n\n- flow betweenness (`flowbet()`)\n- load centrality (`loadcent()`)\n- Gil-Schmidt Power Index (`gilschmidt()`)\n- information centrality (`infocent()`)\n- stress centrality (`stresscent()`)\n\n## Dedicated packages\n\n\n{{< CRAN centiserve >}}, {{< CRAN CINNA >}}  \n\n\n::: {.cell hash='index_cache/revealjs/centiserve_00f62a4a89d7bdaa31b1349d7b4e71b7'}\n\n```{.r .cell-code}\nlibrary(centiserve)\nas.character(lsf.str(\"package:centiserve\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"averagedis\"            \"barycenter\"            \"bottleneck\"           \n [4] \"centroid\"              \"closeness.currentflow\" \"closeness.freeman\"    \n [7] \"closeness.latora\"      \"closeness.residual\"    \"closeness.vitality\"   \n[10] \"clusterrank\"           \"communibet\"            \"communitycent\"        \n[13] \"crossclique\"           \"decay\"                 \"diffusion.degree\"     \n[16] \"dmnc\"                  \"entropy\"               \"epc\"                  \n[19] \"geokpath\"              \"hubbell\"               \"katzcent\"             \n[22] \"laplacian\"             \"leaderrank\"            \"leverage\"             \n[25] \"lincent\"               \"lobby\"                 \"markovcent\"           \n[28] \"mnc\"                   \"pairwisedis\"           \"radiality\"            \n[31] \"salsa\"                 \"semilocal\"             \"topocoefficient\"      \n```\n:::\n:::\n\n\n[centiserver](http://www.centiserver.org/) lists more than 400 indices\n\nCINNA:  \nComputing and comparing top informative centrality measures \n\n## Alternatives?\n\n{{< CRAN netrankr >}}:  \nTools which allow an indexfree assessment of centrality, including:  \n\n- partial centrality\n- expected centrality\n- probabilistic centrality\n\n:::{.callout-tip}\n## Help\n\nTutorials and material for using netrankr can be found at [netrankr.schochastics.net](http://netrankr.schochastics.net/)\n\n:::\n\n# \n\n## Cohesive groups\n\nCohesive subgroups are subsets of actors among whom there are relatively strong, direct, intense, frequent, or positive ties. \n\nMethods that formalize the intuitive and theoretical notion of social group using social network properties\n\n:::{.center-x}\n![](img/cohesive.png){width=\"950\"}\n:::\n\n## Cliques\n\nA *clique* in a network is a set of nodes that form a complete subnetwork within a network (called a complete **subgraph**). \n\nA **maximal clique** is a clique that cannot be extended to a bigger clique by addding more nodes to it. \n\n\n::: {.cell hash='index_cache/revealjs/load_clique_graph_e14882d7517d465f0dae4943299a4210'}\n\n```{.r .cell-code}\ndata(\"clique_graph\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/clique_graph_f8627ae29cb8c710eae82d9a644b3cd0'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/clique_graph-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Cliques\n\nMaximal cliques can be calculated with `max_cliques()` \n\n::: {.cell hash='index_cache/revealjs/calc_max_cliques_a35a17c8cf7765a147a6068872737336'}\n\n```{.r .cell-code}\n# only return cliques with three or more nodes\ncl <- max_cliques(clique_graph,min = 3)\ncl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n+ 3/30 vertices, from 0193e05:\n[1]  9 17 18\n\n[[2]]\n+ 3/30 vertices, from 0193e05:\n[1] 7 4 5\n\n[[3]]\n+ 3/30 vertices, from 0193e05:\n[1] 7 4 8\n\n[[4]]\n+ 3/30 vertices, from 0193e05:\n[1] 10  2 11\n\n[[5]]\n+ 3/30 vertices, from 0193e05:\n[1] 16 12 15\n\n[[6]]\n+ 3/30 vertices, from 0193e05:\n[1] 6 1 5\n\n[[7]]\n+ 4/30 vertices, from 0193e05:\n[1] 12 13 15 14\n\n[[8]]\n+ 3/30 vertices, from 0193e05:\n[1] 12  2  1\n\n[[9]]\n+ 5/30 vertices, from 0193e05:\n[1] 1 2 5 4 3\n```\n:::\n:::\n\n\n## Cliques\n\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/clique_graph_2_06438cb49cb4023cc5e03b60cc374d2b'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/clique_graph_2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## k-core decomposition\n\nA **k-core** is a subgraph in which every node has at least k neighbors within the subgraph. A k-core is thus a relaxed version of a clique.  \n\n\n::: {.cell hash='index_cache/revealjs/kcore_2db145fe62c0f83ead46d0b91ff1a1d1'}\n\n```{.r .cell-code}\nkcore <- coreness(clique_graph)\nkcore\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 4 4 4 4 4 3 2 2 2 2 2 3 3 3 3 3 2 2 1 1 1 1 1 1 1 1 1 1 1 1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/kcore_plot_ad7c06d8af2f27971388b0091d1eeb1c'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/kcore_plot-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Clustering/Community detection\n\n**Minimum-cut method**  \ncut graph into partitions which minimizes some metric\n\n**Hierarchical clustering**  \nAgglomerative/Divisive methods to build a hierarchy of clusters  \nbased on node similarity\n\n**Modularity Maximization**  \nModularity is defined as the fraction of edges that fall within given groups minus the expected fraction if edges were random\n\n**Statistical inference**  \n[stochastic blockmodeling](https://graph-tool.skewed.de/) based on generative models\n\n## Min Cut clustering\n\n\n::: {.cell hash='index_cache/revealjs/mincut_d21c69bcbc85d89d6525d1a927b2771d'}\n\n```{.r .cell-code}\ng <- sample_islands(2,10,0.9,5)\ng <- simplify(g)\n```\n:::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/mincut_plot_5895d567a800eeed0522a25818801f58'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/mincut_plot-1.png){fig-align='center' width=384}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell hash='index_cache/revealjs/mincut_calc_611414f5ffdd54be8f964ee0327c8ffb'}\n\n```{.r .cell-code}\nmin_cut(g,value.only = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$value\n[1] 5\n\n$cut\n+ 5/83 edges from f5ac651 (vertex names):\n[1] 12--13 13--16 13--17 13--19 13--20\n\n$partition1\n+ 1/20 vertex, named, from f5ac651:\n[1] 13\n\n$partition2\n+ 19/20 vertices, named, from f5ac651:\n [1] 1  2  3  4  5  6  7  8  9  10 11 12 14 15 16 17 18 19 20\n```\n:::\n:::\n\n:::\n::::\n\nReally only works in very obvious cases.\n\n## Hierarchical clustering\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/hierarch_clust_46126597bbf6170b8d73d9c060830df9'}\n\n```{.r .cell-code}\nD <- distances(g)\nhclust_avg <- hclust(as.dist(D), method = \"average\")\ncut_avg <- cutree(hclust_avg, k = 2)\n\nplot(hclust_avg)\nrect.hclust(hclust_avg , k = 2, border = 2:6)\nabline(h = 2, col = 'red')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/hierarch_clust-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n\n## Clustering with igraph\n\n<br>\n\n- There is no agreed upon best method\n- Modularity maximization is still widely considered \"state-of-the-art\"\n- Generative models are, however, a strong contender  \n  (not implemented in R yet)\n\n\n::: {.cell hash='index_cache/revealjs/cluster_alg_e1f2f5074701c54826e88c9faf1a2ec7'}\n\n```{.r .cell-code}\nls(\"package:igraph\",pattern = \"cluster_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"cluster_edge_betweenness\"  \"cluster_fast_greedy\"      \n [3] \"cluster_fluid_communities\" \"cluster_infomap\"          \n [5] \"cluster_label_prop\"        \"cluster_leading_eigen\"    \n [7] \"cluster_leiden\"            \"cluster_louvain\"          \n [9] \"cluster_optimal\"           \"cluster_spinglass\"        \n[11] \"cluster_walktrap\"         \n```\n:::\n:::\n\n\n## Clustering workflow\n\n\n::: {.cell hash='index_cache/revealjs/karate_074e1001ec45242f7399710d626ed0a4'}\n\n```{.r .cell-code}\ndata(\"karate\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/karate_plot_dfc71ce2f51003d976c3e8450ab89a58'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/karate_plot-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Clustering workflow\n\n\n::: {.cell hash='index_cache/revealjs/cluster_ex_78e053e90abb139ea69b535d30428110'}\n\n```{.r .cell-code}\n# compute clustering\nclu <- cluster_louvain(karate)\n\n# cluster membership vector\nmem <- membership(clu)\nmem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 2 2 2 1 3 1 2 1 1 1 3 3 2 1 3 1 3 1 3 4 4 4 3 4 4 3 3 4 3 3\n```\n:::\n\n```{.r .cell-code}\n# clusters as list\ncom <- communities(clu)\ncom\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`1`\n [1]  1  2  3  4  8 10 12 13 14 18 20 22\n\n$`2`\n[1]  5  6  7 11 17\n\n$`3`\n [1]  9 15 16 19 21 23 27 30 31 33 34\n\n$`4`\n[1] 24 25 26 28 29 32\n```\n:::\n:::\n\n\n## Clustering workflow\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/karate_cluster_0477e39921d846e5bb74f59453dc8527'}\n\n```{.r .cell-code}\nimc <- cluster_infomap(karate)\nlec <- cluster_leading_eigen(karate)\nloc <- cluster_louvain(karate)\nsgc <- cluster_spinglass(karate)\nwtc <- cluster_walktrap(karate)\n\nscores <- c(infomap = modularity(karate,membership(imc)),\n            eigen = modularity(karate,membership(lec)),\n            louvain = modularity(karate,membership(loc)),\n            spinglass = modularity(karate,membership(sgc)),\n            walk = modularity(karate,membership(wtc)))\n\nscores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  infomap     eigen   louvain spinglass      walk \n 0.402038  0.393409  0.415598  0.418803  0.353222 \n```\n:::\n:::\n\n\n## Cluster workflow\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/karate_plot_clu_768ddd54a7ad869e3729655aef333e87'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/karate_plot_clu-1.png){fig-align='center' width=960}\n:::\n:::\n\n# Beyond \"standard\" networks\n\n## Two-mode networks\n\nA **two-mode network** is a network that consists of two disjoint sets of nodes (like people and events)\n\nCommon examples include:   \n\n- Affiliation networks (Membership in institutions)\n- Voting/Sponsorship networks (politicians and bills)\n- Citation network (authors and papers)\n- Co-Authorship networks (authors and papers)\n\n## Toy example\n\n\n::: {.cell hash='index_cache/revealjs/southern_dat_load_b3c7f13ea0e9c81ffac786b7a2771398'}\n\n```{.r .cell-code}\ndata(\"southern_women\")\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/southern_women_ac28258f3e42c6599750f11ab230b5a6'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/southern_women-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Analyzing two-mode networks \n\n<br>\n\nThe adjacency matrix is called **incidence matrix**\n\n\n::: {.cell hash='index_cache/revealjs/incidence_southern_d73a67fd9c25085a0000fc76877b7140'}\n\n```{.r .cell-code}\nA <- as_incidence_matrix(southern_women)\nA[1:8, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          6/27 3/2 4/12 9/26 2/25 5/19 3/15 9/16 4/8 6/10 2/23 4/7 11/21 8/3\nEVELYN       1   1    1    1    1    1    0    1   1    0    0   0     0   0\nLAURA        1   1    1    0    1    1    1    1   0    0    0   0     0   0\nTHERESA      0   1    1    1    1    1    1    1   1    0    0   0     0   0\nBRENDA       1   0    1    1    1    1    1    1   0    0    0   0     0   0\nCHARLOTTE    0   0    1    1    1    0    1    0   0    0    0   0     0   0\nFRANCES      0   0    1    0    1    1    0    1   0    0    0   0     0   0\nELEANOR      0   0    0    0    1    1    1    1   0    0    0   0     0   0\n [ reached getOption(\"max.print\") -- omitted 1 row ]\n```\n:::\n:::\n\n\n{{< CRAN tnet >}} and {{< CRAN bipartite >}}  offer some methods to analyse two mode networks **directly**, by adapting tools for standard networks.\n\n## Projecting two-mode networks\n\n![](img/small_project.png)\n\n\n::: {.cell hash='index_cache/revealjs/proj_women_730584b9bd13317d0d15f90bd63b76e2'}\n\n```{.r .cell-code}\nB <- A%*%t(A)\nB[1:5,1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          EVELYN LAURA THERESA BRENDA CHARLOTTE\nEVELYN         8     6       7      6         3\nLAURA          6     7       6      6         3\nTHERESA        7     6       8      6         4\nBRENDA         6     6       6      7         4\nCHARLOTTE      3     3       4      4         4\n```\n:::\n:::\n\n\n## Projecting two-mode networks\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/plot_weighted_proj_bea26205e342d653ffcece63f3a41453'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/plot_weighted_proj-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Filtering projections\n\n![](img/proj_flow.png)\n\n**naïve**  \ndelete all edge with a weight less than x\n\n**advanced**  \nstatistical tools using null models: {{< CRAN backbone >}}  \n[Introduction to the package](https://arxiv.org/abs/1912.12779)\n\n## \"Backbone\" null models\n\nCompare an edge's observed weight in the projection to the distribution of weights expected in a projection obtained from a random bipartite network where both the row vertex degrees and column vertex degrees are ...\n\n**Fixed degree sequence model**  \n... *exactly* fixed at their original values\n\n**Stochastic degree sequence model**  \n... *approximately* fixed at their original values\n\n## \"Backbone\" example\n\n\n::: {.cell hash='index_cache/revealjs/southern_backbone_f2bce2f5c6d92267909dffa65c00aa87'}\n\n```{.r .cell-code}\nlibrary(backbone)\nsw_bb <- sdsm(southern_women,alpha = 0.4)\n```\n:::\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/sw_bb_plot_d22480a20faf9225d4cee73b462f2a22'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/sw_bb_plot-1.png){fig-align='center' width=1152}\n:::\n:::\n\n\n\n## Application of projections\n\n**Co-voting behavior of US senators**\n\n![](img/senate.jpg)\n\n[Link to paper](https://www.nature.com/articles/s41598-020-74175-w)\n\n\n## Signed networks\n\n<br>\n\nSigned networks include two types of relations:  \npositive (\"friends\") and negative (\"foes\")\n\ntypical research questions involve (implemented in {{< CRAN signnet >}}):\n\n- structural balance\n- blockmodeling\n- (centrality)\n\n## Structural balance theory\n<br>\n\n**developed by Heider in 1940s**:  \n\n- mental discomfort when actors hold contradictory beliefs\n- there is a preference for ’balance’ (consistency) states\n- states of imbalance and mental discomfort create ’tension’\n- imbalanced states are unstable\n- imbalanced states move towards balance\n\n**formalised with graph theory by Cartwright Harary (1950s)**\n\n## Structural balance theory\n\n:::{.center-x}\n![](img/balance_triples.png){width=\"900\"}\n:::\n\n**Beyond triangles**  \nA network is balanced if it can be partitioned into two groups such that all intra group edges are positive and all inter group edges are negiative\n\n**Extended form of balance** (Davis 1960s)  \nA network is balanced if it can be partitioned into k groups ...\n\n\n## Toy example\n\n<br>\n\n\n::: {.cell hash='index_cache/revealjs/sign example_26924056d75e9633516f1fc920f9c07c'}\n\n```{.r .cell-code}\nlibrary(signnet)\ndata(\"tribes\")\n```\n:::\n\n\n:::{.columns}\n:::{.column width=\"49%\"}\n\n::: {.cell hash='index_cache/revealjs/tribes_now_9db7c56155daa03d6aa7280908aa8b4a'}\n\n```{.r .cell-code}\nggsigned(tribes)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/tribes_now-1.png){width=960}\n:::\n:::\n\n:::\n\n:::{.column width=\"49%\"}\n\n::: {.cell hash='index_cache/revealjs/tribes_w_6433b77de3c657c3026e0f46dbfd6072'}\n\n```{.r .cell-code}\nggsigned(tribes,weights = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/tribes_w-1.png){width=960}\n:::\n:::\n\n:::\n:::\n\n## Measuring structural balance\n\n- **triangles**: Fraction of balanced triangles. \n- **walks**: fraction of signed to unsigned walks\n- **frustration**: optimal partition such that the sum of intra group negative and inter group positive edges is minimized\n\n\n::: {.cell hash='index_cache/revealjs/balance_scores_ea17c82d124baf18ab6b1de582b8ee6f'}\n\n```{.r .cell-code}\nbalance_score(tribes,method = \"triangles\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.867647\n```\n:::\n\n```{.r .cell-code}\nbalance_score(tribes,method = \"walk\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.357576\n```\n:::\n\n```{.r .cell-code}\nbalance_score(tribes,method = \"frustration\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.758621\n```\n:::\n:::\n\n\n\n## Blockmodeling\n\nIn signed blockmodeling, the goal is to determine $k$ blocks of nodes such that all intra-block edges are positive and inter-block edges are negative\n\n\n::: {.cell hash='index_cache/revealjs/signed_bm_ee9f17081719c0ce091516b3b6259425'}\n\n```{.r .cell-code}\nset.seed(141)\nbl <- signed_blockmodel(tribes,3)\nbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$membership\n [1] 3 3 1 1 2 1 1 1 2 2 1 1 2 2 3 3\n\n$criterion\n[1] 2\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\" output-location='slide' hash='index_cache/revealjs/signed_bm_plot_1aa8cb6302308139dd35f7f43a0e9d4c'}\n\n```{.r .cell-code}\nggblock(tribes,blocks = bl$membership,show_blocks = TRUE,show_labels = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-revealjs/signed_bm_plot-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n## Generalized blockmodeling\n\nThe diagonal block structure is not always the most optimal representaion of the data\n\n::: {.cell layout-align=\"center\" hash='index_cache/revealjs/weird_signed_00131ca55a58f929abfc2577cb0516e1'}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/weird_signed-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n## Generalized blockmodeling\n\nThe function `signed_blockmodel_general()` allows to specify arbitrary block structures.\n\n::: {.cell hash='index_cache/revealjs/gen_block_mat_868e5e3d069b5cc4460de24e9c2f8d89'}\n\n```{.r .cell-code}\nset.seed(424) #for reproducibility\nblockmat <- matrix(c(1,-1,-1,-1,1,1,-1,1,-1),3,3,byrow = TRUE)\nblockmat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1   -1   -1\n[2,]   -1    1    1\n[3,]   -1    1   -1\n```\n:::\n\n```{.r .cell-code}\ngeneral <- signed_blockmodel_general(g,blockmat,alpha = 0.5)\ntraditional <- signed_blockmodel(g,k = 3,alpha = 0.5,annealing = TRUE)\n\nc(general$criterion,traditional$criterion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 6\n```\n:::\n:::\n\n\n## Generalized blockmodeling\n:::{.center-x}\n![](img/blockmodel_general.png){width=\"750\"}\n:::\n\n## Other functions\n\nMost functions us the igraph name + `_signed`:\n\n- `as_adj_signed()`\n- `as_incidence_signed()`\n- `laplacian_matrix_signed()`\n- `triad_census_signed()`\n- `degree_signed()`\n- `eigen_centrality_signed()`\n- `sample_islands_signed()`\n\n## All signed triads\n\n:::{.center-x}\n![](img/signed_triads.png){width=\"600\"}\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}